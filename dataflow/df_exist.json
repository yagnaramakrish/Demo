{
	"name": "df_exist",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dept_table",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_emp_db",
						"type": "DatasetReference"
					},
					"name": "Emp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sink_dataflow",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DEPTNO as decimal(2,0),",
				"          DNAME as string,",
				"          LOC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          EMPNO as decimal(4,0),",
				"          ENAME as string,",
				"          JOB as string,",
				"          MGR as decimal(4,0),",
				"          HIREDATE as timestamp,",
				"          SAL as decimal(7,2),",
				"          COMM as decimal(7,2),",
				"          DEPTNO as decimal(2,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Emp",
				"source1, Emp exists(source1@DEPTNO == Emp@DEPTNO,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          dept_name as string,",
				"          dept_id as string",
				"     ),",
				"     partitionFileNames:['Df_exists.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}